#include "defines.h"
#include "postprocessing_utils.h"
#include "utils.h"

layout(binding = 0, rgba32f) uniform image2D g_Result;
layout(binding = 1) uniform sampler2D g_Depth;
layout(binding = 2) uniform FogData
{
    vec3  g_FogColor;
    float g_FogMin;
    float g_FogMax;
    float g_FogDensity;
    uint  g_FogEquation;
};

layout(push_constant) uniform PushData
{
    mat4  g_InvProjMat;
    ivec2 g_Size;
    vec2 g_TexelSize;
};

#define GROUP_SIZE 8
layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;

void main()
{
    const ivec2 pixelCoords = ivec2(gl_GlobalInvocationID);
    if (pixelCoords.x >= g_Size.x || pixelCoords.y >= g_Size.y)
        return;

    vec3 color = imageLoad(g_Result, pixelCoords).rgb;

    const vec2 uv = (pixelCoords + 0.5) * g_TexelSize;
    const float depth = texture(g_Depth, uv).x;
    const float fogDistance = length(ViewPosFromDepth(g_InvProjMat, uv, depth));
    const float fogAlpha = GetFogFactor(g_FogEquation, fogDistance, g_FogDensity, g_FogMin, g_FogMax);
    color = mix(color, g_FogColor, fogAlpha);

    imageStore(g_Result, pixelCoords, vec4(color, 1.f));
}
