Libs: basis_universal; ktx

#include "ktx.h"
#include "transcoder/basisu.h"
#include "transcoder/basisu_transcoder.h"
#include "encoder/basisu_enc.h"
#include "encoder/basisu_comp.h"


		if (!m_Specs.bCompress)
			return;

		basisu::basisu_encoder_init();
		basisu::image img;
		img.resize(m_Size.x, m_Size.y);
		auto& pixels = img.get_pixels();
		memcpy(pixels.data(), m_ImageData.Data(), m_ImageData.Size());

		basisu::basis_compressor_params basisCompressorParams;

		basisCompressorParams.m_source_images.push_back(img);
		basisCompressorParams.m_perceptual = false;
		basisCompressorParams.m_mip_srgb = false;

		basisCompressorParams.m_write_output_basis_files = true;
		basisCompressorParams.m_out_filename = "test.ktx2";

		basisCompressorParams.m_uastc = true;
		basisCompressorParams.m_rdo_uastc_multithreading = false;
		basisCompressorParams.m_multithreading = true;
		basisCompressorParams.m_status_output = true;
		basisCompressorParams.m_compute_stats = true;

		basisCompressorParams.m_create_ktx2_file = true;
		basisCompressorParams.m_ktx2_uastc_supercompression = basist::KTX2_SS_ZSTANDARD;

		basisCompressorParams.m_ktx2_srgb_transfer_func = true; // is sRGB?
		//basisCompressorParams.m_read_source_images = true;
		basisCompressorParams.m_write_output_basis_files = true;

		basisu::job_pool jpool(std::thread::hardware_concurrency() - 1);
		basisCompressorParams.m_pJob_pool = &jpool;

		basisu::basis_compressor basisCompressor;
		basisu::enable_debug_printf(true);

		bool ok = basisCompressor.init(basisCompressorParams);
		if (ok)
		{
			basisu::basis_compressor::error_code result = basisCompressor.process();

			if (result != basisu::basis_compressor::cECSuccess)
			{
				ok = false;
			}
		}
		else
			printf("Failure\n");

		if (ok)
		{
			ktxTexture2* ktx_texture;
			KTX_error_code result = ktxTexture_CreateFromNamedFile("test.ktx2", KTX_TEXTURE_CREATE_LOAD_IMAGE_DATA_BIT, (ktxTexture**)(&ktx_texture));
			if (result != KTX_SUCCESS)
			{
				throw std::runtime_error("Could not load the requested image file.");
			}
		}